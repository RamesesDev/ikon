import com.rameses.annotations.*;

class RoleclassService {

	@PersistenceContext("main")
	def em;

	@ProxyMethod
	public def getList(def params) {
		if(!params) params = [rolelevel:0];
		if(!params.rolelevel) params.rolelevel = 0;
		return em.sqlContext.createNamedQuery( "roleclass:list" ).setParameters(params).resultList;
	}
	
	@ProxyMethod
	public def read(def o) {
		def x = em.read( "roleclass", o );
		x.modules = em.sqlContext.createNamedQuery("roleclass:module-list").setParameters( [roleclass: x.name] ).resultList;
		return x;
	}

	@ProxyMethod
	public def addModule(def o) {
		assert o.roleclass;
		assert o.module;
		em.create( "roleclass:module", o );
	}
	
	@ProxyMethod
	public def removeModule(def o) {
		assert o.roleclass;
		assert o.module;
		em.delete( "roleclass:module", o );
	}
	
	@ProxyMethod
	public def getModulePermissions( def roleclass, def excluded ) {
	
		def filter = null;
		if( excluded ) {
			//the value of each item in excluded is <module>:<entity>.<action>
			//group by <module>. for each value remove the module part.
			filter = excluded.findAll{ it.indexOf(":")>0 }.groupBy{ it.substring(0,it.indexOf(":"))  }.each {
				it.value = it.value.collect { x->x.substring( x.indexOf(":")+1 ) }     
			};
		}
		
		def o = [roleclass: roleclass ];
		def list = em.sqlContext.createNamedQuery( "roleclass:module-permissions" ).setParameters( o ).resultList;
		list.each { f->
			def sublist  = (!f.permissions ? [] : em.serializer.read(f.permissions) ); 
			f.remove( "permissions" ); 
			if( filter ) { 
				def mf = filter[f.modulename];
				if(mf) sublist.removeAll( sublist.findAll{z-> mf.contains(z.action) } );
			}
			f.rows = sublist.collect { x-> x.action.substring(0, x.action.indexOf(".")) }.unique();
			f.cols = sublist.collect { x-> x.action.substring( x.action.indexOf(".") + 1 ) }.unique();
			f.index = sublist.collect{ x->[action:f.modulename +":"+ x.action] }.groupBy { y->y.action }; 
		}
		return list;
	}
	
}
