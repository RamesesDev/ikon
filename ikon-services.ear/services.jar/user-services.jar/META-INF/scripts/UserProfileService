import com.rameses.annotations.*;
import com.rameses.util.*;

class UserProfileService 
{	
    @PersistenceContext("main")
    def em;
    
	@Service("DateService")
	def dateSvc;
	
	@Resource("CacheService")
	def cacheService;
	
	def df = new java.text.SimpleDateFormat("yyyy-MM-dd");
	
	@Env
	def env;
	
	
	//checks if a name can be used. true = name can be used. false = name cannot be used.
	@ProxyMethod
	public def verifyUsername(def username ) {
		def o = em.sqlContext.createQuery('select 1 from login u where u.uid=?').setParameter(1, username).singleResult;
		if( !o ) return true;
		return false;
	}
	
	@ProxyMethod
	public def register(def o ) {
		if( !verifyUsername(o.username) )
			throw new Exception("Invalid username. Name is already taken");
		//create login first
		o.objid = "USR:"+new java.rmi.server.UID();
		def u = [:];    	
    	u.objid = o.objid;
    	u.uid = o.username;
    	u.password = Encoder.MD5.encode(o.password, u.uid);
		u.usertype = o.role;
		em.create( "login", u );
		o.dtcreated = dateSvc.serverDate;
		return em.create("userprofile", o);
	}

    @ProxyMethod
    public def update( def o ) {
		def user = em.update("userprofile", o);
		cacheService.remove( o.objid );
		return user;
    }
	
   @ProxyMethod
	public def getInfo( def o ){
		def info = em.read("userprofile", [objid:o.objid]);
		if(info.birthdate) info.birthdate = df.format( info.birthdate );
		if(info.dtcreated) info.dtcreated = info.dtcreated.toString();
		return info;
	}
	
	/**
	 * This is marked as local to avoid interceptors
	 * This is used to retrieve the user info from the SessionService
	 * @see LoginService
	 */
	@ProxyMethod(local=true)
	public def getUserInfo( def o ) {
		def user = cacheService.get( o.objid );
		if( !user ) {
			user = getInfo( o );
			cacheService.put(o.objid, user, 30000 );
		}
		
		user.photoversion = user.info?.photoversion;
		user.has_set_security = user.info?.has_set_security;
		
		return user;
	}
	
	/**
	 * This method is used to find a user account
	 * @param param (Map)
	 *	 contains a key account(String), account is either the username or email address of the user
	 */
	@ProxyMethod
	public def findUser( param ) {
		def list = [];
		em.sqlContext.createQuery('select objid from userprofile where username = $P{account} or email = $P{account}')
		  .setParameters(param)
		  .resultList.each{
			 list << em.read('userprofile', it);
		   }
		return list;
	}
	
	@Service('LoginService')
	def loginSvc;
	
	/**
	 * This method is used to change the password when the user resets its password
	 * Invoking this method will remove the reset_password flag on the user's info field
	 */
	@ProxyMethod
	public void changePassword( param ) {
		def user = getUserInfo( [objid: param.userid] );
		
		param.username = user.username;
		param.oldpassword = user.info.reset_password;
		loginSvc.changePassword( param );
		
		user.info.remove('reset_password');
		update( user );
	}
	
	@ProxyMethod
	public void resetPassword( param ) {
		def user = getUserInfo( param );
		def password = KeyGen.generateAlphanumKey("", 10);
		param.password = Encoder.MD5.encode( password, user.username );
		param.uid = user.username;
		em.sqlContext.createExecutor('update login set password = $P{password} where uid = $P{uid}')
		  .setParameters( param ).execute();
		  
		if( !user.info ) user.info = [:];
		user.info.reset_password = password;
		update( user );
		  
		sendEmail( user.username, password, user.email );
	}
	
	
	@Service("EmailService")
	def emailSvc;
	
	private def sendEmail(uid, password, email) {
		def m = [:];
		m.subject = "Gazeebu - Reset Account Password";
		m.message = """
		  <html>
		   <body>
			<p>
				You have reset your account password.
				Login to <a href="http://www.gazeebu.com/classroom">Gazeebu Classroom</a> and use the temporary password provided below:
			</p>
			Username: <b>$uid</b><br/>
			Temporary Password: <b>$password</b>
		   </body>
		  </html>
		""";	
		m.recipients = [email];
		emailSvc.send(m);	
	}
	
}
