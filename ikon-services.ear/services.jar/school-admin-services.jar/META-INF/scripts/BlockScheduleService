import com.rameses.annotations.*;

class BlockScheduleService {

	@PersistenceContext("main")
	def em;
	
	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getList(def params) {
		def qry = em.sqlContext.createNamedQuery( "class:list" );
		if(params) {
			if(params._start) qry.setFirstResult( params._start );
			if(params._limit) qry.setMaxResults( params._limit );
			qry.setParameters( params );
		}
		def list = qry.resultList;
		list.each {
			it.schedules = em.sqlContext.createNamedQuery("class:class-schedules").setParameters( [classid:it.objid] ).resultList;
		}
		def mainlist = [];	
		
		//display pending blocks
		qry = em.sqlContext.createNamedQuery( "class:list-pending-blocks" ).setParameters( params );
		mainlist = qry.resultList.collect { [blockid: it.objid, blockcode: it.code, programcode: it.programcode, programtitle: it.programtitle ] }
		mainlist.addAll( list );
		return mainlist;
	}
	
	@ProxyMethod
	public def saveBlock(def o) {
		o.objid = "BLK"+new java.rmi.server.UID();
		return em.create( "class:block", o );
	}
	
	@ProxyMethod
	public def getBlock(def o) {
		o = em.read( "class:block", o );
		def p = em.read( "program", [objid: o.programid] );
		o.programcode = p.code;
		o.programtitle = p.title;
		return o;
	}
	
	@ProxyMethod
	public def getBlockClasses(def o) {
		def list = em.sqlContext.createNamedQuery( "class:list-block-classes").setParameters( o ).resultList;
		list.each {
			it.schedules = em.sqlContext.createNamedQuery("class:class-schedules").setParameters( [classid:it.objid] ).resultList;
		}	
		return list;
	}
	
	@ProxyMethod
	public def lookupRegularProgramCourses(def o) {
		return em.sqlContext.createNamedQuery("class_schedule:list-regular-program-courses").setParameters(o).resultList;
	}
	
	private void checkClassConflicts( def o ) {
		//check each class schedule.
		for( it in o.schedules) {
			def m = [:];
			m.blockid = o.blockid;
			m.courseid = o.courseid;
			m.days_of_week = it.days_of_week;
			m.fromtime = it.fromtime;
			m.totime = it.totime;	
			def z = em.sqlContext.createNamedQuery( "class_schedule:check-block-schedule-conflict" ).setParameters(m).singleResult;
			if( z.conflict_count > 0 ) {
				throw new Exception("There are conflicts in schedule");
			}
		}
	}
	
	@ProxyMethod
	public def saveClass(def o) {
		//check if there is conflict when adding the class
		checkClassConflicts( o );
		if(!o.objid) o.objid = "CLS"+new java.rmi.server.UID();
		o = em.save( "class", o );
		if(o.removedSchedules) {
			o.removedSchedules.each {
				em.delete("class:schedule", it);
			}
			o.remove( "removedSchedules" );
		}
		o.schedules.each {
			if(!it.objid) it.objid = "CLSSKED:" + new java.rmi.server.UID();
			it.classid = o.objid;
			em.save( "class:schedule", it );
		}
		return o;
	}
	
	
	@ProxyMethod
	public def create(def o) {
		o.objid = "CLS" + new java.rmi.server.UID();
		return em.create( "class", o );
	}
	
	@ProxyMethod
	public void changeSchedule(def o) {
		checkClassConflicts( o );
		if(o.removedSchedules) {
			o.removedSchedules.each {
				em.delete("class:schedule", it);
			}
			o.remove( "removedSchedules" );
		}
		o.schedules.each {
			if(!it.objid) it.objid = "CLSSKED:" + new java.rmi.server.UID();
			it.classid = o.objid;
			em.save( "class:schedule", it );
		}
	}
	
	
}