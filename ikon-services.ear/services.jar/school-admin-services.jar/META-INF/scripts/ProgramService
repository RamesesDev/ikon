import com.rameses.annotations.*;

class ProgramService {

	@PersistenceContext("main")
	def em;

	@ProxyMethod
	public def getList(def params) {
		def qry = em.sqlContext.createNamedQuery( "program:list" );
		if(params) {
			def buff = new StringBuffer();
			if( params.orgunitid ) { 
				buff.append( ''' orgunitid=$P{orgunitid} ''' );
			}
			if( params.code ) {
				if( buff.length() > 0 ) buff.append( " and " );
				if( params.code.indexOf("%")>=0) {
					buff.append( ''' code like $P{code} ''' );
				}
				else {
					buff.append( ''' code=$P{code} ''' );
				}
			}
			if( params.title ) {
				if( buff.length() > 0 ) buff.append( " and " );
				if( params.title.indexOf("%")>=0) {
					buff.append( ''' title like $P{title} ''' );
				}
				else {
					buff.append( ''' code=$P{title} ''' );
				}
			}
			if( buff.length() > 0 ) {
				qry.setVars( [condition: " where " + buff.toString() ] );
			}
			if(params._start) qry.setFirstResult( params._start );
			if(params._limit) qry.setMaxResults( params._limit );
			qry.setParameters( params );
		}
		return qry.resultList;
	}
	
	@ProxyMethod
	public def create(def o) {
		if(!o.objid) o.objid = "PRG" + new java.rmi.server.UID();
		return em.create( "program", o );
	}
	
	@ProxyMethod
	public def read(def o) {
		return em.read( "program", o );
	}

	@ProxyMethod
	public def update(def o) {
		return em.update( "program", o );
	}
	
	@ProxyMethod
	public def remove(def o) {
		em.delete( "program", o );
	}
	
	@ProxyMethod
	public def getProgramCourses(def o) {
		def list = em.sqlContext.createNamedQuery("program:list-courses").setParameters( o ).resultList;
		list.each {
			def p = [programid:o.objid, courseid: it.courseid];
			p.reqtype = 0;
			it.prerequisites = em.sqlContext.createNamedQuery("program:list-requisites").setParameters(p).resultList;
			p.reqtype = 1;
			it.corequisites = em.sqlContext.createNamedQuery("program:list-requisites").setParameters(p).resultList;
		}
		return list;
	}
	
	@ProxyMethod
	public def addProgramCourse(def o) {
		return em.create( "program:course", o );
	}
	
	@ProxyMethod
	public def removeProgramCourse(def o) {
		return em.delete( "program:course", o );
	}

	@ProxyMethod
	public def updateProgramCourse(def o) {
		return em.update( "program:course", o );
	}
	
	
	@ProxyMethod
	public def addCourseRequisite(def o) {
		em.save( "program:coursereq", o );
	}
	
	@ProxyMethod
	public def removeCourseRequisite(def o) {
		em.delete( "program:coursereq", o );
	}


	@ProxyMethod
	public def lookupCourseRequisites(def o) {
		def str = (o.reqtype == "0") ? "lookup-course-prerequisites" : "lookup-course-corequisites";
		return em.sqlContext.createNamedQuery("program:"+str).setParameters(o).resultList;
	}
	
}