import com.rameses.annotations.*;

class CheckTeacherConflictInterceptor {

	@PersistenceContext("main")
	def em;
	
	@After(pattern="BlockScheduleService.changeSchedule.*")
	public void checkTeacherConflict( evt ) {
		def o = evt.args[0];
		def m = [:];
		m.schooltermid = o.schooltermid;
		if( o.teacherid ) {
			o.schedules.each {
				m.days_of_week = it.days_of_week;
				m.teacherid = o.teacherid;
				m.fromtime = it.fromtime;
				m.totime = it.totime;
				m.scheduleid = it.objid;
				//remove first all existing conflicts
				em.sqlContext.createNamedExecutor("teacher_schedule:remove-teacher-conflict").setParameters(m).execute();
				em.sqlContext.createNamedExecutor("teacher_schedule:flag-teacher-conflict").setParameters(m).execute();
			}		
		}
	}
	
	//attach room conflict flags
	@After(pattern="BlockScheduleService.getBlockClasses.*")
	public void findTeacherConflict( evt ) {
		def list = evt.result;
		list.each { o->
			if( o.teacherid ) {
				o.schedules.each {
					def x = em.sqlContext.createNamedQuery("teacher_schedule:check-teacher-conflict").setParameters( [scheduleid: it.objid, teacherid:o.teacherid ] ).singleResult;
					if( x.flag > 0 ) it.teacher_conflict = true;
				}	
			}
		}	
	}
	
}